name: Build, Test, and Deploy to GCP Kubernetes

on:
  workflow_dispatch:

env:
  DOCKER_REPO: dg4285/harmonix-dev # TODO: Update your Docker Hub repository
  IMAGE_NAME: demo-gradle              # TODO: Update your service name
  PROJECT_ID: srilanka-zss-poc-d            # TODO: Update your GCP project id
  K8S_CLUSTER: harmonix-dev-cluster             # TODO: Update your Kubernetes cluster name
  K8S_REGION: us-central1            # TODO: Update your Kubernetes cluster region

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run Unit Tests with Coverage
        run: |-
          ./gradlew test jacocoTestReport
          
          # Install xmllint
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
          
          # Check if the XML report exists
          if [ ! -f build/reports/jacoco/test/jacocoTestReport.xml ]; then
            echo "JaCoCo XML report not found!"
            exit 1
          fi
          
          # Extract line coverage percentage
          COVERAGE=$(xmllint --xpath "string(//report/counter[@type='LINE']/@covered)" build/reports/jacoco/test/jacocoTestReport.xml)
          MISSED=$(xmllint --xpath "string(//report/counter[@type='LINE']/@missed)" build/reports/jacoco/test/jacocoTestReport.xml)
          
          TOTAL=$((COVERAGE + MISSED))
          PERCENTAGE=$((COVERAGE * 100 / TOTAL))
          
          echo "Coverage: $PERCENTAGE%"
          
          if [ "$PERCENTAGE" -lt 50 ]; then
            echo "Unit test coverage is below 80%. Failing build."
            exit 1
          fi

      - name: Verify and Archive Coverage Report
        run: |
          # Verify the existence of the report directory and its contents
          if [ -d build/reports/jacoco ]; then
            echo "JaCoCo reports directory found."
            ls -la build/reports/jacoco
          else
            echo "JaCoCo reports directory not found!"
            exit 1
          fi
  
          # Archive the report
          tar -czf coverage-report.tar.gz -C build/reports/jacoco .
  
          # Verify the archive creation
          if [ -f coverage-report.tar.gz ]; then
            echo "Coverage report archive created successfully."
            ls -la coverage-report.tar.gz
          else
            echo "Failed to create coverage report archive!"
            exit 1
          fi
  
          # List the contents of the archive to verify
          tar -tzf coverage-report.tar.gz

      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v2
        with:
            name: coverage-report
            path: coverage-report.tar.gz

#      - name: Log in to Docker Hub
#        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#
#      - name: Pre-pull Docker Image
#        run: |
#            docker pull busybox:latest
#
#      - name: Create and Push Coverage Report Docker Image
#        run: |
#          # Create and run a Docker container with a volume for coverage
#          docker run --name coverage-container -v /coverage busybox sleep 1d
#
#          # Copy the coverage report archive into the container's coverage directory
#          docker cp coverage-report.tar.gz coverage-container:/coverage/
#
#          # Verify the contents of the container's coverage directory
#          docker exec coverage-container ls -la /coverage/
#
#          # Commit the container to create a new Docker image
#          docker commit coverage-container ${{ env.DOCKER_REPO }}-coverage-report:${{ github.sha }}
#
#          # Push the Docker image to the specified repository
#          docker push ${{ env.DOCKER_REPO }}-coverage-report:${{ github.sha }}
#
#          # Remove the container
#          docker rm -f coverage-container

      - name: Build and Push Docker Image - project
        run: |-
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t ${{ env.DOCKER_REPO }}-${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.DOCKER_REPO }}-${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          token_format: 'access_token'
          workload_identity_provider: projects/73029603858/locations/global/workloadIdentityPools/my-pool/providers/github-provider
          service_account: github-build-deploy-cloudrun@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components list
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt update
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
          echo "##vso[task.setvariable variable=USE_GKE_GCLOUD_AUTH_PLUGIN]True"
          gcloud components list


      - name: Connect to GCP Kubernetes Cluster
        run: |-
          gcloud container clusters get-credentials ${{ env.K8S_CLUSTER }} --region ${{ env.K8S_REGION }} --project ${{ env.PROJECT_ID }}

      - name: Deploy to GCP Kubernetes
        run: |-
          kubectl set image deployment/${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}=${{ env.DOCKER_REPO }}-${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl rollout status deployment/${{ env.IMAGE_NAME }}
